@main(input: int) {
.b1:
  n_num0: int = id input;
  v0_num0: int = const 0;
  v1_num0: int = const 1;
  v2_num0: int = const 2;
  sum_num0: int = id v1_num0;
  i_num0: int = id v2_num0;
  result_num0: int = id v1_num0;
  sum_num1: int = id sum_num0;
  i_num1: int = id i_num0;
  jmp .for.cond.1;
.for.cond.1:
  ii_num1: int = mul i_num1 i_num1;
  comp_num1: bool = gt ii_num1 n_num0;
  br comp_num1 .for.end .for.body;
.for.body:
  qut_num1: int = div n_num0 i_num1;
  mpt_num1: int = mul qut_num1 i_num1;
  dif_num1: int = sub n_num0 mpt_num1;
  comp1_num1: bool = eq dif_num1 v0_num0;
  sum_num4: int = id sum_num1;
  br comp1_num1 .if.body .for.incre;
.if.body:
  sum_num2: int = add sum_num1 i_num1;
  sum_num3: int = add sum_num2 qut_num1;
  sum_num4: int = id sum_num3;
  jmp .for.incre;
.for.incre:
  i_num2: int = add i_num1 v1_num0;
  sum_num1: int = id sum_num4;
  i_num1: int = id i_num2;
  jmp .for.cond.1;
.for.end:
  comp2_num0: bool = eq sum_num1 n_num0;
  result_num2: int = id result_num0;
  br comp2_num0 .if.success .if.failure.end;
.if.success:
  result_num1: int = id v0_num0;
  result_num2: int = id result_num1;
  jmp .if.failure.end;
.if.failure.end:
  print result_num2;
  ret;
}