@main(input: int) {
.b1:
  zero_num0: int = const 0;
  ten_num0: int = const 10;
  result_num0: int = const 0;
  jmp .begin;
.begin:
  result_num1: int = phi result_num0 result_num3 .b1 .check_done;
  input_num0: int = phi input input_num1 .b1 .check_done;
  digit_num0: int = phi _UNDEFINED_ digit_num1 .b1 .check_done;
  done_num0: bool = phi _UNDEFINED_ done_num1 .b1 .check_done;
  processed_num0: bool = phi _UNDEFINED_ processed_num2 .b1 .check_done;
  r0_num0: int = phi _UNDEFINED_ r0_num1 .b1 .check_done;
  digit_num1: int = call @peel_last_digit input_num0;
  input_num1: int = div input_num0 ten_num0;
  result_num2: int = add result_num1 digit_num1;
  jmp .check_result;
.check_result:
  result_num3: int = phi result_num2 result_num5 .begin .process_result;
  processed_num1: bool = phi processed_num0 processed_num2 .begin .process_result;
  r0_num1: int = phi r0_num0 r0_num2 .begin .process_result;
  print result_num3;
  processed_num2: bool = call @is_single_digit result_num3;
  br processed_num2 .check_done .process_result;
.process_result:
  r0_num2: int = call @peel_last_digit result_num3;
  result_num4: int = div result_num3 ten_num0;
  result_num5: int = add result_num4 r0_num2;
  jmp .check_result;
.check_done:
  done_num1: bool = eq input_num1 zero_num0;
  br done_num1 .done .begin;
.done:
  print result_num3;
  ret;
}
@is_single_digit(input: int): bool {
.b1:
  ten_num0: int = const 10;
  zero_num0: int = const 0;
  divided_num0: int = div input ten_num0;
  mul_by_ten_num0: int = mul divided_num0 ten_num0;
  result_num0: bool = eq mul_by_ten_num0 zero_num0;
  ret result_num0;
}
@peel_last_digit(input: int): int {
.b1:
  ten_num0: int = const 10;
  div_by_ten_num0: int = div input ten_num0;
  mul_by_ten_num0: int = mul div_by_ten_num0 ten_num0;
  last_digit_num0: int = sub input mul_by_ten_num0;
  ret last_digit_num0;
}